#summary Documentation about the container
#labels IoC,Container,Cocoa,iPhone,DependencyInjection

=IoC Container description=

The IoC container provides dependency injection to Cocoa applications. It was created with iPhone development in mind.

It aims to provide some functionalities from [http://www.springsource.org/ Spring] and from [http://code.google.com/p/google-guice/ Guice] (in fact, we're somehow inspired by [http://code.google.com/p/roboguice/ RoboGuice]). But due to the complexity inherent to implementing a full IoC container (as the ones mentioned before), we restricted it to very basic features.

==The basics==
The container has the following characteristics:
 * The container holds definitions about objects. No object is created until somebody request it.
 * Every definition must have a name that must be unique inside the container in order to identify the object.
 * The definition can indicate that the object must be singleton (it is created and stored in a pool when the object is requested the first time). If singleton is specified as FALSE, the object will be created each time (but it can be released when no longer required). This is similar to prototype scope in [http://www.springsource.org/ Spring] , an as we learned from using [http://code.google.com/p/roboguice/ RoboGuice], this behavior would be preferible in many mobile development scenarios. 
 * The definition can indicate that the object must lazy. That is, when the object is requested, a proxy to such object is returned. Upon the first method call on such reference, the object is created. This is useful for avoiding creating big object graphs unnecessarily.
 * The object can be injected (this is the main goal of the framework!). It must have properties or at least setters for performing the injection. The definition allows performing the following injections:
   * References to other definitions (by name). 
   * Values
 * New factories can be implemented for object creation customization.
 * Container instantiation can be done by code and "annotations" (like [http://code.google.com/p/google-guice/ Guice]/[http://www.springsource.org/ Spring]) or by XML (like [http://www.springsource.org/ Spring]).

==Simple example==
The main class is [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICContainer.m OxICContainer], which represents (I feel you guessed it) the container. It depends on [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Wrapper/API/OxICWrapperFactory.h OxICWrapperFactory] in order to handle classes and objects dynamically. So, instantiating it is pretty simple:
{{{
id<OxICWrapperFactory> wrapperFactory = [[OxICSimpleWrapperFactory alloc] init];
OxICContainer *newContainer = [[OxICContainer alloc] initWithWrapperFactory:wrapperFactory];
}}}

The definitions are represented by [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICObjectDefinition.m OxICObjectDefinition] class. A static method allows an easy definition creation:
{{{
[newContainer addDefinition: [OxICObjectDefinition withName: @"mainView"
                                                   andClass: @"MyView"
                                               andSingleton: FALSE
                                                    andLazy: FALSE
                                              andReferences: [NSDictionary dictionaryWithObjectsAndKeys:
                                                              @"mainViewController", @"owner",
                                                              nil]
                                                  andValues: [NSDictionary dictionaryWithObjectsAndKeys:
                                                              @"This is my view", @"text",
                                                              nil]]
];
}}}

Also, classes can be "annotated" with definition metadata. In this scenario, definitions can be added using the following method:
{{{
[newContainer addDefinitionFromClassName:@"MyViewController"];
}}}

Since Objective C doesn't provide an annotation facility (like C# or Java), we used compiler directives in order to simulate them:
{{{
@implementation MyViewController
@synthesize myServiceProperty;

IoCName(mainViewController)
IoCSingleton
IoCInject(myServiceProperty,serviceNameInContainer)
IoCLazy
...
}}}

Note that the directives creates methods with special signatures, which are inspected by the container. Because of this, such directives must be included inside the implementation body.

On the other hand, the container can be created using XML
{{{
<contanier>
	<object id="theService" class="ExampleServiceImpl2" lazy="false"/>
	<object id="theExecutor" class="ServiceExecutorImpl1">
		<property name="service" ref="theService"/>
	</object>
</contanier>
}}}

but the implementation is not currently complete. The [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICXmlContainerBuilder.m OxICXmlContainerBuilder] class must be used in order to create a container by parsing an XML.

Finally, when you need an object from the container, just get it with the getObject method. For example:
{{{
[window addSubview: [newContainer getObject:@"mainView"]];
}}}


For a more complete example, please download the source code and open the [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/samples/ sample project]

=Advanced topics=

==Custom factories==
Object construction can be customized implementing the [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICFactoryObject.h OxICFactoryObject]. You must just implement this protocol and specify the implementing class name in the definition as object class. The container will detect that it is a factory and will inject. After that, it will call the getObject method. This approach is borrowed from Spring [http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/beans/factory/FactoryBean.html FactoryBean].

Besides, the container provides some common use factories:
 * [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICDefaultFactoryObject.m OxICDefaultFactoryObject]: This factroy is used when no factory is specified. It just creates the object and injects it using the container.
 * [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICNibFactoryObject.m OxICNibFactoryObject]: this class creates a [http://developer.apple.com/library/ios/#documentation/uikit/reference/UIView_Class/UIView/UIView.html UIView] from a NIB. The NIB name and the owner (typically the view controller) must be specified. The NIB is readed from the bundle.
 * [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICManagedObjectModelFactoryObject.m OxICManagedObjectModelFactoryObject]: Creates a [http://en.wikipedia.org/wiki/Core_Data Core Data] [http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/CoreDataFramework/Classes/NSManagedObjectModel_Class/Reference/Reference.html NSManagedObjectModel] object, merging all the definitions present in the bundle. 
 * [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICPersistentStoreCoordinatorFactoryObject.m OxICPersistentStoreCoordinatorFactoryObject]: Creates a [http://en.wikipedia.org/wiki/Core_Data Core Data] [http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/CoreDataFramework/Classes/NSPersistentStoreCoordinator_Class/NSPersistentStoreCoordinator.html NSPersistentStoreCoordinator]. The store URL and the managed object model must be injected.

==Lazy objects==
When you request an object for whose the definitions is marked as lazy, an instance of [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICLazyProxy.m OxICLazyProxy] is returned. This is a subclass of [http://developer.apple.com/library/mac/#documentation/cocoa/reference/foundation/Classes/NSProxy_Class/Reference/Reference.html NSProxy] which holds a reference to the [http://code.google.com/p/oxeniphonecommons/source/browse/trunk/main/Classes/Container/OxICFactoryObject.h OxICFactoryObject] that instantiates the object upon the first method call.